// This script automatically generates API request validation schemas based on the default export type of any TS file under `pages/api` (given the file has no TS errors).
// This is awful. But that's okay because it's funny. Oh, and also useful.

import { createGenerator } from 'ts-json-schema-generator';
import fs from 'fs-extra';
import path from 'path';
import { exec } from 'child_process';
import c from 'ansi-colors';

const run = (command: string) => new Promise(resolve => {
	exec(command).once('exit', resolve);
});

/** All `.ts` files to generate validators for. */
const sourcePaths: string[] = [];
/** All old `.validate.ts` files to be deleted. */
const validatorPaths: string[] = [];

const walk = (dir: string) => {
	for (const dirent of fs.readdirSync(dir, { withFileTypes: true })) {
		const direntPath = path.join(dir, dirent.name);
		if (dirent.isDirectory()) {
			walk(direntPath);
		} else if (direntPath.endsWith('.ts')) {
			if (direntPath.endsWith('.validate.ts')) {
				validatorPaths.push(direntPath);
			} else {
				sourcePaths.push(direntPath);
			}
		}
	}
};

walk(path.normalize('pages/api'));

for (const validatorPath of validatorPaths) {
	fs.unlinkSync(validatorPath);
}

const generateValidator = async (
	/** The TS file to generate a validator for. */
	sourcePath: string
) => {
	const sourcePathNoExtension = sourcePath.slice(0, -3);
	const sourcePathModule = sourcePathNoExtension.split(path.sep).join('/');
	console.log(`${c.gray(sourcePathModule)} ${c.blue('Generating validator...')}`);
	
	const outputPath = `${sourcePathNoExtension}.validate.ts`;
	await fs.createFile(outputPath);
	// This is necessary so validator imports don't throw errors and prevent TS compilation.
	await fs.writeFile(
		outputPath,
		'export default {} as any;'
	);
	
	const inputPath = ['', ...sourcePath.split(path.sep)].join('__');
	await fs.createFile(inputPath);
	await fs.writeFile(
		inputPath,
		`import type Handler from '${sourcePathModule}';\n\nexport type Request = NonNullable<typeof Handler['Request']>;`
	);
	
	try {
		const schemaString = JSON.stringify(
			createGenerator({
				path: inputPath,
				tsconfig: 'tsconfig.json',
				additionalProperties: true
			}).createSchema('Request'),
			null,
			'\t'
		);
		await fs.writeFile(
			outputPath,
			`// This file is automatically generated by \`scripts/generate-validators\`. Do not edit directly.\n\nimport { createValidator } from 'modules/server/api';\n\nexport default createValidator(${schemaString});`
		);
		
		await run(`npx eslint --fix ${outputPath}`);
		
		console.log(`${c.gray(sourcePathModule)} ${c.green('Done!')}`);
	} catch (error) {
		console.log(`${c.gray(sourcePathModule)} ${c.red('Error:')}`);
		console.error(error);
		
		await fs.unlink(outputPath);
	}
	
	fs.unlink(inputPath);
};

Promise.all(sourcePaths.map(generateValidator)).then(() => {
	console.log(c.green('All done!'));
	process.exit();
});