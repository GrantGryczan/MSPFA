@use "sass:meta";
@use "sass:map";

// Used as a useless default for the `theme` mixin, so that no extra check is necessary for whether the `$function` parameter is set.
@function return-value($value) {
	@return $value;
}

// Lets you set a CSS property which varies in value dependent on the user's theme.
@mixin theme(
	// The property to set. Example: `background-color`
	$property,
	// The map of theme IDs to values to apply. Example: `(standard: #ff0000)`
	$values,
	// An optional function to apply to each value in `$values`, called with arguments `$value, $args...`.
	$function: meta.get-function('return-value'),
	$args...
) {
	#{$property}: meta.call($function, map-get($values, standard), $args...);
	@each $theme, $value in map-remove($values, standard) {
		.theme-#{$theme} & {
			#{$property}: meta.call($function, $value, $args...);
		}
	}
}

$back-color: (
	standard: #535353,
	dark: #434343
);

$mid-color: (
	standard: #c6c6c6,
	dark: #383838
);

$front-color: (
	standard: #eeeeee,
	dark: #242424
);

$text-color: (
	standard: #000000,
	dark: #dadada
);

$front-alt-color: (
	standard: #696969,
	dark: #4f4f4f
);

$text-alt-color: (
	standard: #f2f2f2,
	dark: #f2f2f2
);

$frontest-color: (
	standard: #ffffff,
	dark: #1a1a1a
);

$border-color: (
	standard: #8d8d8d,
	dark: #404040
);

$border-focus-color: (
	standard: #000000,
	dark: #999999
);

$link-color: (
	standard: #0000ee,
	dark: #3db8ff
);

$link-visited-color: (
	standard: #551a8b,
	dark: #bf7cff
);

$link-active-color: (
	standard: #ee0000,
	dark: #ee3333
);

$button-color: (
	standard: #dadada,
	dark: #474747
);

$button-text-color: (
	standard: #3e3e3e,
	dark: #dadada
);

$button-alt-color: (
	standard: #696969,
	dark: #c0c0c0
);

$button-text-alt-color: (
	standard: #dddddd,
	dark: #1a1a1a
);