@use "sass:meta";
@use "sass:map";
@use "sass:color";

// Used as a useless default for the `theme` mixin, so that no extra check is necessary for whether the `$function` parameter is set.
@function return-value($value) {
	@return $value;
}

// Lets you set a CSS property which varies in value dependent on the user's theme.
@mixin theme(
	// The property to set. Example: `background-color`
	$property,
	// The map of theme IDs to values to apply. Example: `(standard: #ff0000)`
	$values,
	// An optional function to apply to each value in `$values`, called with arguments `$value, $args...`.
	$function: meta.get-function('return-value'),
	$args...
) {
	#{$property}: meta.call($function, map-get($values, standard), $args...);
	@each $theme, $value in map-remove($values, standard) {
		.theme-#{$theme} & {
			#{$property}: meta.call($function, $value, $args...);
		}
	}
}

$back-color: (
	standard: #535353,
	dark: #141414
);

$mid-color: (
	standard: #c6c6c6,
	dark: #202020
);

$front-color: (
	standard: #eeeeee,
	dark: #2b2b2b
);

$text-color: (
	standard: #000000,
	dark: #dadada
);

// A color used for areas which are darker independently of theme.
$front-alt-color: (
	standard: #696969,
	dark: #494949
);

// The text color for `$front-alt-color`.
$text-alt-color: (
	standard: #f2f2f2,
	dark: #f2f2f2
);

$frontest-color: (
	standard: #ffffff,
	dark: #1b1b1b
);

$border-color: (
	standard: #8d8d8d,
	dark: #484848
);

$border-focus-color: (
	standard: #000000,
	dark: #b0b0b0
);

$link-color: (
	standard: #0000ee,
	dark: #3db8ff
);

$link-visited-color: (
	standard: #551a8b,
	dark: #bf7cff
);

$link-active-color: (
	standard: #ee0000,
	dark: #ee3333
);

$button-color: (
	standard: #dadada,
	dark: #545454
);

$button-text-color: (
	standard: #3e3e3e,
	dark: #e0e0e0
);

$button-alt-color: (
	standard: #585858,
	dark: #dadada
);

$button-text-alt-color: (
	standard: #dddddd,
	dark: #3e3e3e
);

$translucent-text-color: ();
@each $theme, $color in $text-color {
	$translucent-text-color: map.set($translucent-text-color, $theme, color.scale($color, $alpha: -30%));
}