@use 'sass:meta';
@use 'sass:map';
@use 'sass:color';
@use 'sass:list';

@import 'styles/themes';

// Offsets the RGB values by `$offset`.
@function adjust-color($color, $offset: 16) {
	@return color.adjust(
		$color,
		$red: $offset, $green: $offset, $blue: $offset
	);
}

@function depth-shadow($color, $scale: 2, $depth: 2, $lightness: -33%) {
	$box-shadow: ();
	@for $offset from 1 through $depth {
		$box-shadow: list.append(
			$box-shadow,
			#{$scale * $offset}px #{$scale * $offset}px 0 0 color.scale($color, $lightness: $lightness),
			$separator: comma
		);
	}
	@return $box-shadow;
}

// Applies a pixelated shadow which gives the element 3D depth. Lowers the depth on `:active`.
@mixin depth-shadow(
	$colors,
	$scale: 2,
	$depth: 2,
	$depth-active: $depth / 2
) {
	$margin: $scale * $depth;
	$offset-active: $scale * ($depth - $depth-active);

	margin-right: #{$margin}px;
	margin-bottom: #{$margin}px;
	@include theme(box-shadow, $colors, meta.get-function('depth-shadow'), $scale, $depth);

	&:active {
		left: #{$offset-active}px;
		top: #{$offset-active}px;
		@include theme(box-shadow, $colors, meta.get-function('depth-shadow'), $scale, $depth-active);

		&::after {
			// Prevent the button's bounding box from moving when active.
			left: -#{$offset-active}px;
			top: -#{$offset-active}px;
		}
	}

	&::after {
		padding-right: #{$margin}px;
		padding-bottom: #{$margin}px;
	}
}

// Applies styles to color and add depth to a `button` element.
@mixin styled-button(
	// A color value or a map of themes to color values for the color of the button.
	$colors,
	// Optional override for the default button text color.
	$button-text-color: false,
	// Whether `$colors` represents the color behind the button and not the color of the button.
	$color-is-behind-button: false,
	$scale: 2,
	$depth: 2,
	$depth-active: $depth / 2
) {
	@if type-of($colors) != 'map' {
		$colors: (standard: $colors);
	}

	@if $button-text-color == false {
		$button-text-color: $translucent-text-color;
	}

	@if type-of($button-text-color) != 'map' {
		$button-text-color: (standard: $button-text-color);
	}

	@if $color-is-behind-button {
		@each $theme, $color in $colors {
			$colors: map.set($colors, $theme, adjust-color($color, -12));
		}
	}

	@include depth-shadow($colors, $scale, $depth, $depth-active);
	@include theme(background-color, $colors);
	@include theme(color, $button-text-color);

	&:focus:not(:active) {
		@include theme(background-color, $colors, meta.get-function('adjust-color'), 28);
	}
}